tosca_definitions_version: cloudify_dsl_1_3

description: >
  This Blueprint installs the nodecellar application behind an haproxy instance on an openstack cloud environment.

imports:
  - http://cloudify.co/spec/cloudify/5.1.0/types.yaml
  - plugin:cloudify-openstack-plugin?version= >=3.0.0
  - plugin:cloudify-utilities-plugin
  - types/nodecellar.yaml
  - types/openstack-types.yaml
  - types/haproxy/haproxy.yaml
  - types/scale/scale.yaml

inputs:

  agent_key_private:
    description: >
      The content of the agent's private key.
    default: { get_secret: agent_key_private }

  agent_key_public:
    description: >
      The content of the agent's public key.
    default: { get_secret: agent_key_public }

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ubuntu

  image:
    description: >
      An Openstack Image ID. Tested with a Ubuntu 14.04 image.
    type: string
    default: { get_secret: ubuntu_trusty_image }

  flavor:
    description: >
      An Openstack Flavor ID.
    default: '2'

  manager_network:
    default: external

  network_deployment_name:
    default: openstack-example-network

  user_domain_name:
    default: default

  project_domain_name:
    default: default

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region_name: { get_secret: keystone_region }
    user_domain_name: { get_input: user_domain_name }
    project_domain_name: { get_input: project_domain_name }

node_templates:

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
        - name: { get_input: agent_user }
          groups: sudo
          shell: /bin/bash
          sudo: ['ALL=(ALL) NOPASSWD:ALL']
          ssh-authorized-keys:
          - { get_input: agent_key_public }
        packages:
        - python-minimal

  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    relationships:
      - type: node_connected_to_mongo
        target: mongod
      - type: node_contained_in_nodejs
        target: nodejs
      - type: app_connected_to_haproxy
        target: haproxy

  mongod:
    type: nodecellar.nodes.MonitoredMongoDatabase
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host

  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host

  haproxy:
    type: nodecellar.nodes.MonitoredHAProxy
    properties:
      backend_app_port: { get_property: [ nodecellar, port ] }
    relationships:
      - target: haproxy_frontend_host
        type: cloudify.relationships.contained_in

  mongod_host:
    type: nodecellar.nodes.MonitoredServer
    properties:
      client_config: *openstack_config
      resource_config:
        image_id: { get_input: image }
        flavor_id: { get_input: flavor }
        user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
    relationships:
      - target: mongodb_host_port
        type: cloudify.relationships.openstack.server_connected_to_port
      - type: cloudify.relationships.connected_to
        target: cloudify_host_cloud_config

  nodejs_host:
    type: nodecellar.nodes.MonitoredServer
    instances:
      deploy: 1
    properties:
      client_config: *openstack_config
      resource_config:
        image_id: { get_input: image }
        flavor_id: { get_input: flavor }
        user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
    relationships:
      - target: nodejs_host_port
        type: cloudify.relationships.openstack.server_connected_to_port
      - type: cloudify.relationships.connected_to
        target: cloudify_host_cloud_config
      - type: cloudify.relationships.contained_in
        target: scaling_group

  haproxy_frontend_host:
    type: nodecellar.nodes.MonitoredServer
    properties:
      client_config: *openstack_config
      resource_config:
        image_id: { get_input: image }
        flavor_id: { get_input: flavor }
        user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
    relationships:
      - target: haproxy_host_port
        type: cloudify.relationships.openstack.server_connected_to_port
      - type: cloudify.relationships.connected_to
        target: cloudify_host_cloud_config

  mongodb_host_port:
    type: cloudify.nodes.openstack.Port
    properties:
      client_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_network
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.relationships.openstack.port_connected_to_security_group
        target: mongod_security_group

  nodejs_host_port:
    type: cloudify.nodes.openstack.Port
    properties:
      client_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_network
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.relationships.openstack.port_connected_to_security_group
        target: nodecellar_security_group

  haproxy_host_port:
    type: cloudify.nodes.openstack.Port
    properties:
      client_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.relationships.openstack.port_connected_to_security_group
        target: haproxy_frontend_security_group
      - type: cloudify.relationships.openstack.port_connected_to_floating_ip
        target: nodecellar_ip

  mongod_security_group:
    type: cloudify.nodes.openstack.SecurityGroup
    properties:
      client_config: *openstack_config
      resource_config:
        name: mongod-security-group
        description: 'mongod security group'
      security_group_rules:
        - direction: ingress
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - direction: ingress
          protocol: tcp
          port_range_min: { get_property: [ mongod, port ] }
          port_range_max: { get_property: [ mongod, port ] }
        - direction: ingress
          protocol: tcp
          port_range_min: 28017
          port_range_max: 28017

  nodecellar_security_group:
    type: cloudify.nodes.openstack.SecurityGroup
    properties:
      client_config: *openstack_config
      resource_config:
        name: nodecellar-security-group
        description: "nodecellar security group"
      security_group_rules:
        - direction: ingress
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - direction: ingress
          protocol: tcp
          port_range_min: { get_property: [ nodecellar, port ] }
          port_range_max: { get_property: [ nodecellar, port ] }

  haproxy_frontend_security_group:
    type: cloudify.nodes.openstack.SecurityGroup
    properties:
      client_config: *openstack_config
      resource_config:
        name: haproxy-frontend-security-group
        description: "haproxy frontend security group"
      security_group_rules:
        - direction: ingress
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - direction: ingress
          protocol: tcp
          port_range_min: { get_property: [ haproxy, frontend_port ] }
          port_range_max: { get_property: [ haproxy, frontend_port ] }
        - direction: ingress
          protocol: tcp
          port_range_min: { get_property: [ haproxy, statistics_port ] }
          port_range_max: { get_property: [ haproxy, statistics_port ] }

  nodecellar_ip:
    type: cloudify.nodes.openstack.FloatingIP
    properties:
      client_config: *openstack_config
      resource_config:
        floating_network_id: { get_capability: [ { get_input: network_deployment_name }, external_network ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: openstack

  private_subnet:
    type: cloudify.nodes.openstack.Subnet
    properties:
      client_config: *openstack_config
      use_external_resource: true
      resource_config:
        id: { get_capability: [ { get_input: network_deployment_name }, private_subnet ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: private_network

  private_network:
    type: cloudify.nodes.openstack.Network
    properties:
      client_config: *openstack_config
      use_external_resource: true
      resource_config:
        id: { get_capability: [ { get_input: network_deployment_name }, private_network ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: scaling_group

  scaling_group:
    type: cloudify.nodes.Root
    relationships:
    - type: cloudify.relationships.contained_in
      target: openstack

  public_subnet:
    type: cloudify.nodes.openstack.Subnet
    properties:
      client_config: *openstack_config
      use_external_resource: true
      resource_config:
        id: { get_capability: [ { get_input: network_deployment_name }, public_subnet ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: public_network

  public_network:
    type: cloudify.nodes.openstack.Network
    properties:
      client_config: *openstack_config
      use_external_resource: true
      resource_config:
        id: { get_capability: [ { get_input: network_deployment_name }, public_network ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: openstack

  openstack:
    type: cloudify.nodes.SharedResource
    properties:
      resource_config:
        deployment:
          id: { get_input: network_deployment_name }

outputs:

  endpoint:
    description: Web application endpoint
    value:
      concat:
      - 'http://'
      - { get_attribute: [ nodecellar_ip, floating_ip_address ] }
      - ':'
      - { get_property: [haproxy, frontend_port] }
      - '/'

groups:

  nodejs_host_scale_group:
    members: [nodejs_host, nodejs_host_port, scaling_group]

  scale_up_group:
    members: [nodejs_host]
    policies:
      auto_scale_up:
        type: scale_policy_type
        properties:
          policy_operates_on_group: true
          scale_limit: 6
          scale_direction: '<'
          scale_threshold: 6
          service_selector: .*nodejs_host.*.process.node.cpu.percent
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: 1
                scalable_entity_name: nodejs_host_scale_group
                # scale_compute: true

  scale_down_group:
    members: [nodejs_host]
    policies:
      auto_scale_down:
        type: scale_policy_type
        properties:
          scale_limit: 2
          scale_direction: '>'
          scale_threshold: 1
          service_selector: .*nodejs_host.*.process.node.cpu.percent
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: -1
                scalable_entity_name: nodejs_host_scale_group
                # scale_compute: true

  heal_group:
    members: [nodejs_host]
    policies:
      simple_autoheal_policy:
        type: cloudify.policies.types.host_failure
        properties:
          service:
            - .*nodejs_host.*.cpu.total.system
          interval_between_workflows: 60
        triggers:
          auto_heal_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: heal
              workflow_parameters:
                node_instance_id: { 'get_property': [ SELF, node_id ] }
                diagnose_value: { 'get_property': [ SELF, diagnose ] }

policies:

  nodejs_host_scale_group_policy:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
    targets: [nodejs_host_scale_group]
